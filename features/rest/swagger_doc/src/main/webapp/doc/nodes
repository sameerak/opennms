{
	"apiVersion":"0.2",
	"swaggerVersion":"1.1",
	"basePath":"http://localhost:8980/opennms/rest2",
	"resourcePath":"/resources",
	"produces":["application/xml","application/json"],
	"apis":[
		{
			"path":"/nodes",
			"description":"Fetches all the nodes in the OpenNMS",
			"operations":[
				{
					"httpMethod":"GET",
					"nickname":"getAllNodes",
					"responseClass":"List[Node]",
					"parameters":[
						{
							"paramType": "query",
							"name": "_s",
							"description": "FIQL string to search node data",
							"dataType": "String",
							"required": false,
							"allowMultiple": false
						}, 
						{
							"paramType": "query",
							"name": "limit",
							"description": "number of node elements to be returned to as the response",
							"dataType": "integer",
							"required": false,
							"allowMultiple": false
						}, 
						{
							"paramType": "query",
							"name": "offset",
							"description": "position to start the data retrieval",
							"dataType": "integer",
							"required": false,
							"allowMultiple": false
						}, 
						{
							"paramType": "query",
							"name": "orderBy",
							"description": "attribute name to be used to order node elements",
							"dataType": "String",
							"required": false,
							"allowMultiple": false
						}, 
						{
							"paramType": "query",
							"name": "order",
							"description": "\"asc\" to order node data in ascending order or \"desc\" for descending order",
							"dataType": "String",
							"required": false,
							"allowMultiple": false
						}
					],
					"responseMessages":[
					                    {
					                    	"code":400,
					                    	"message":"Invalid FIQL operator specified"
					                    },
					                    {
					                    	"code":400,
					                    	"message":"Invalid Date format used"
					                    },
					                    {
					                    	"code":400,
					                    	"message":"non-numerical data provided for parameters limit and offset"
					                    },
					                    {
					                    	"code":400,
					                    	"message":"data field specified in the query is not available for searching"
					                    }
				                   ],
					"summary":"Getting details about nodes",
					"notes": "When called without setting any query parameters retreives details about all the nodes in paginated form. User can specify FIQL query string to query node data. For dates format \"yyyy-MM-ddTHH:mm:ss\" should be used. For the creation of criteria objects logical AND (\";\") operator was given priority over logical OR (\",\") operator. Pagination is enabled on search results, so following instructions in \"http://www.opennms.org/wiki/New_REST_API/User_Documentation#Using_pagination_on_requests\" you can manipulate paginated results."
				}
			]
		},
		{
			"path":"/nodes/{nodeID}",
			"description":"Fetches a specific node in the OpenNMS server",
			"operations":[
				{
					"httpMethod":"GET",
					"nickname":"getAspecificNode",
					"responseClass":"List[Node]",
					"parameters":[
						{
							"paramType": "path",
							"name": "nodeID",
							"description": "ID of node that needs to be fetched",
							"dataType": "integer",
							"required": true,
							"allowMultiple": false
						} 
					],
					"responseMessages":[
						                    {
						                    	"code":400,
						                    	"message":"Invalid node ID supplied"
						                    }
					                   ],					
					"summary":"Getting details about a specific node",
					"notes": "When called with node ID in the path, retrives details about only that node."
				}
			]
		},
		{
			"path":"/nodes/categories",
			"description":"Fetches all the nodes belong to a set of category",
			"operations":[
				{
					"httpMethod":"GET",
					"nickname":"getNodesByCategory",
					"responseClass":"List[Node]",
					"parameters":[
						{
							"paramType": "query",
							"name": "q",
							"description": "name of a category",
							"dataType": "String",
							"required": false,
							"allowMultiple": true
						}
					],
					"produces":["application/xml"],
					"responseMessages":[
					                    {
					                    	"code":400,
					                    	"message":"Not specifying any category"
					                    },
					                    {
					                    	"code":400,
					                    	"message":"Invalid categories specified to search"
					                    }
				                   ],
					
					"summary":"Getting nodes based on a set of categories",
					"notes": "Fetches all ,the nodes belong to the given category set. Available categories are Routers, Switches, Servers, Production, Test, Development. Category set should be specified as ?q={cat_1}&q={cat_2}"
				}
			]
		},
		{
			"path":"/nodes/categories/{category}",
			"description":"Fetches all the nodes belong to the specified category",
			"operations":[
				{
					"httpMethod":"GET",
					"nickname":"getNodesByCategory",
					"responseClass":"List[Node]",
					"parameters":[
						{
							"paramType": "path",
							"name": "category",
							"description": "name of the category",
							"dataType": "String",
							"required": false,
							"allowMultiple": false
						} 
					],
					"produces":["application/xml"],
					"responseMessages":[
					                    {
					                    	"code":400,
					                    	"message":"Not specifying any category"
					                    },
					                    {
					                    	"code":400,
					                    	"message":"Invalid category specified to search"
					                    }
				                   ],
					
					"summary":"Getting nodes based on a specific category",
					"notes": "Fetches all the nodes belong to the specified category. Available categories are Routers, Switches, Servers, Production, Test, Development."
				}
			]
		},
		{
			"path":"/nodes/foreignSource/{foreignSource}",
			"description":"Fetches all the nodes belong to the specified foreign source",
			"operations":[
				{
					"httpMethod":"GET",
					"nickname":"getNodesByForeignSource",
					"responseClass":"List[Node]",
					"parameters":[
						{
							"paramType": "path",
							"name": "foreignSource",
							"description": "name of the foreign source",
							"dataType": "String",
							"required": false,
							"allowMultiple": false
						} 
					],
					"produces":["application/xml"],
					"responseMessages":[
					                    {
					                    	"code":400,
					                    	"message":"Not specifying any foreign source"
					                    }
				                   ],
					
					"summary":"Getting nodes based on a specific foreign source",
					"notes": "Fetches all the nodes belong to the specified foreign source."
				}
			]
		}		
	],
	"models":
		{
			
			"AssetRecord":
				{
					"id":"AssetRecord",
					"properties": {
      "building":
								{
									"type":"string"
								},
      "category":
								{
									"type":"string"
								},
      "lastModifiedBy":
								{
									"type":"string"
								},
      "lastModifiedDate":
								{
									"type":"DateTime"
								},
      "node":
								{
									"type":"integer"
								}
							}
				},
"Node":
				{
					"id":"Node",
					"properties":
						{
							"foreignId":
								{
									"type":"long"
								},
    "foreignSource": 
								{
									"type":"string"
								},
    "label":
								{
									"type":"string"
								},
    "id":
								{
									"type":"integer"
								},
    "type": 
								{
									"type":"string"
								},
    "assetRecord":
								{
    	"$ref":"AssetRecord"
								},
    "createTime": 
								{
									"type":"DateTime"
								},
    "labelSource": 
								{
									"type":"string"
								},
    "lastCapsdPoll":
								{
									"type":"DateTime"
								}
						}
				}
    }
		}
